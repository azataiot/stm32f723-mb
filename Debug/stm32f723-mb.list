
stm32f723-mb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047cc  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d8  080049d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e0  080049e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000000c  080049f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080049f4  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dcb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250f  00000000  00000000  00033e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00036318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002224b  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014311  00000000  00000000  0005a49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9a53  00000000  00000000  0006e7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001481ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  00148250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004994 	.word	0x08004994

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08004994 	.word	0x08004994

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <HAL_UARTEx_RxEventCallback>:
uint16_t oldPos = 0;
uint16_t newPos = 0;

int isOK = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	// make sure that data coming from uart3
	if (huart->Instance == USART3) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <HAL_UARTEx_RxEventCallback+0x88>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d112      	bne.n	8000560 <HAL_UARTEx_RxEventCallback+0x3c>
//			memcpy((uint8_t*) MainBuf + oldPos, RxBuf, Size);
//			newPos = Size + oldPos;
//		}

		// if data is coming from the UART that we hoping, copy the data from rxbuf to the main buffer.
		memcpy(MainBuf,RxBuf,Size);
 800053a:	887b      	ldrh	r3, [r7, #2]
 800053c:	461a      	mov	r2, r3
 800053e:	491c      	ldr	r1, [pc, #112]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000540:	481c      	ldr	r0, [pc, #112]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000542:	f004 fa11 	bl	8004968 <memcpy>

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) RxBuf, RxBuf_SIZE);
 8000546:	220a      	movs	r2, #10
 8000548:	4919      	ldr	r1, [pc, #100]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 800054a:	481b      	ldr	r0, [pc, #108]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800054c:	f004 f98d 	bl	800486a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <HAL_UARTEx_RxEventCallback+0x98>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <HAL_UARTEx_RxEventCallback+0x98>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f022 0208 	bic.w	r2, r2, #8
 800055e:	601a      	str	r2, [r3, #0]

	}

	/****************** PROCESS (Little) THE DATA HERE *********************/
	HAL_UART_Transmit(&huart3, (uint8_t *)"Enter!\r\n", 16, HAL_MAX_DELAY);
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	2210      	movs	r2, #16
 8000566:	4916      	ldr	r1, [pc, #88]	; (80005c0 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800056a:	f002 ffa1 	bl	80034b0 <HAL_UART_Transmit>
	/* Let's say we want to check for the keyword "OK" within our incoming DATA */
	for (int i = 0; i < Size; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	e011      	b.n	8000598 <HAL_UARTEx_RxEventCallback+0x74>
		if ((RxBuf[i] == 'O') && (RxBuf[i + 1] == 'K')) {
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4413      	add	r3, r2
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b4f      	cmp	r3, #79	; 0x4f
 800057e:	d108      	bne.n	8000592 <HAL_UARTEx_RxEventCallback+0x6e>
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3301      	adds	r3, #1
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000586:	5cd3      	ldrb	r3, [r2, r3]
 8000588:	2b4b      	cmp	r3, #75	; 0x4b
 800058a:	d102      	bne.n	8000592 <HAL_UARTEx_RxEventCallback+0x6e>
			isOK = 1;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_UARTEx_RxEventCallback+0xa0>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Size; i++) {
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3301      	adds	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	429a      	cmp	r2, r3
 800059e:	dbe9      	blt.n	8000574 <HAL_UARTEx_RxEventCallback+0x50>
		}
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40004800 	.word	0x40004800
 80005b0:	2000023c 	.word	0x2000023c
 80005b4:	20000248 	.word	0x20000248
 80005b8:	200000f8 	.word	0x200000f8
 80005bc:	200001dc 	.word	0x200001dc
 80005c0:	080049ac 	.word	0x080049ac
 80005c4:	20000288 	.word	0x20000288

080005c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005cc:	f000 fc5f 	bl	8000e8e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d0:	f000 f82e 	bl	8000630 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d4:	f000 f95a 	bl	800088c <MX_GPIO_Init>
	MX_I2C2_Init();
 80005d8:	f000 f886 	bl	80006e8 <MX_I2C2_Init>
	MX_DMA_Init();
 80005dc:	f000 f924 	bl	8000828 <MX_DMA_Init>
	MX_USART3_UART_Init();
 80005e0:	f000 f8f2 	bl	80007c8 <MX_USART3_UART_Init>
	MX_USART1_UART_Init();
 80005e4:	f000 f8c0 	bl	8000768 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf, RxBuf_SIZE);
 80005e8:	220a      	movs	r2, #10
 80005ea:	490c      	ldr	r1, [pc, #48]	; (800061c <main+0x54>)
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0x58>)
 80005ee:	f004 f93c 	bl	800486a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <main+0x5c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f022 0208 	bic.w	r2, r2, #8
 8000600:	601a      	str	r2, [r3, #0]

	if (isOK) {
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0x60>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <main+0x50>
		HAL_UART_Transmit(&huart3, MainBuf, MainBuf_SIZE, HAL_MAX_DELAY);
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2240      	movs	r2, #64	; 0x40
 8000610:	4906      	ldr	r1, [pc, #24]	; (800062c <main+0x64>)
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <main+0x58>)
 8000614:	f002 ff4c 	bl	80034b0 <HAL_UART_Transmit>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000618:	e7fe      	b.n	8000618 <main+0x50>
 800061a:	bf00      	nop
 800061c:	2000023c 	.word	0x2000023c
 8000620:	200000f8 	.word	0x200000f8
 8000624:	200001dc 	.word	0x200001dc
 8000628:	20000288 	.word	0x20000288
 800062c:	20000248 	.word	0x20000248

08000630 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f9a0 	bl	8004984 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xb0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xb0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xb0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemClock_Config+0xb4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <SystemClock_Config+0xb4>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemClock_Config+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fbd3 	bl	8001e48 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x7c>
		Error_Handler();
 80006a8:	f000 f95e 	bl	8000968 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fe62 	bl	8002390 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
		Error_Handler();
 80006d2:	f000 f949 	bl	8000968 <Error_Handler>
	}
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_I2C2_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_I2C2_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00303D5B;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_I2C2_Init+0x74>)
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <MX_I2C2_Init+0x7c>)
 80006f6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_I2C2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_I2C2_Init+0x74>)
 8000700:	2201      	movs	r2, #1
 8000702:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_I2C2_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_I2C2_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C2_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <MX_I2C2_Init+0x74>)
 8000724:	f001 fa68 	bl	8001bf8 <HAL_I2C_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C2_Init+0x4a>
		Error_Handler();
 800072e:	f000 f91b 	bl	8000968 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000732:	2100      	movs	r1, #0
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_I2C2_Init+0x74>)
 8000736:	f001 faef 	bl	8001d18 <HAL_I2CEx_ConfigAnalogFilter>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000740:	f000 f912 	bl	8000968 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000744:	2100      	movs	r1, #0
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_I2C2_Init+0x74>)
 8000748:	f001 fb31 	bl	8001dae <HAL_I2CEx_ConfigDigitalFilter>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000752:	f000 f909 	bl	8000968 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000028 	.word	0x20000028
 8000760:	40005800 	.word	0x40005800
 8000764:	00303d5b 	.word	0x00303d5b

08000768 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART1_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 8000774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000778:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART1_UART_Init+0x58>)
 80007ac:	f002 fe32 	bl	8003414 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80007b6:	f000 f8d7 	bl	8000968 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000074 	.word	0x20000074
 80007c4:	40011000 	.word	0x40011000

080007c8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <MX_USART3_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART3_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART3_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART3_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART3_UART_Init+0x58>)
 800080c:	f002 fe02 	bl	8003414 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000816:	f000 f8a7 	bl	8000968 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000f8 	.word	0x200000f8
 8000824:	40004800 	.word	0x40004800

08000828 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_DMA_Init+0x60>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_DMA_Init+0x60>)
 8000834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_DMA_Init+0x60>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_DMA_Init+0x60>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <MX_DMA_Init+0x60>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_DMA_Init+0x60>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	200c      	movs	r0, #12
 8000864:	f000 fbf8 	bl	8001058 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000868:	200c      	movs	r0, #12
 800086a:	f000 fc11 	bl	8001090 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	203a      	movs	r0, #58	; 0x3a
 8000874:	f000 fbf0 	bl	8001058 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000878:	203a      	movs	r0, #58	; 0x3a
 800087a:	f000 fc09 	bl	8001090 <HAL_NVIC_EnableIRQ>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_GPIO_Init+0xac>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a24      	ldr	r2, [pc, #144]	; (8000938 <MX_GPIO_Init+0xac>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_GPIO_Init+0xac>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_GPIO_Init+0xac>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <MX_GPIO_Init+0xac>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_GPIO_Init+0xac>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_GPIO_Init+0xac>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_GPIO_Init+0xac>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_GPIO_Init+0xac>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_GPIO_Init+0xb0>)
 8000908:	f000 ffda 	bl	80018c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000912:	2312      	movs	r3, #18
 8000914:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800091e:	2304      	movs	r3, #4
 8000920:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_GPIO_Init+0xb4>)
 800092a:	f000 ffc9 	bl	80018c0 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020800 	.word	0x40020800
 8000940:	40020000 	.word	0x40020000

08000944 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM13) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000956:	f000 faa7 	bl	8000ea8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40001c00 	.word	0x40001c00

08000968 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0aa      	sub	sp, #168	; 0xa8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 ffd1 	bl	8004984 <memset>
  if(hi2c->Instance==I2C2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <HAL_I2C_MspInit+0xb4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d13c      	bne.n	8000a66 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fee0 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a06:	f7ff ffaf 	bl	8000968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_I2C_MspInit+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0xb8>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_I2C_MspInit+0xb8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a46:	4619      	mov	r1, r3
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_I2C_MspInit+0xbc>)
 8000a4a:	f000 ff39 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_I2C_MspInit+0xb8>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0xb8>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_I2C_MspInit+0xb8>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	37a8      	adds	r7, #168	; 0xa8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005800 	.word	0x40005800
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0ac      	sub	sp, #176	; 0xb0
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 ff71 	bl	8004984 <memset>
  if(huart->Instance==USART1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a79      	ldr	r2, [pc, #484]	; (8000c8c <HAL_UART_MspInit+0x210>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d172      	bne.n	8000b92 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000aac:	2340      	movs	r3, #64	; 0x40
 8000aae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fe81 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff ff50 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac8:	4b71      	ldr	r3, [pc, #452]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	4a70      	ldr	r2, [pc, #448]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad4:	4b6e      	ldr	r3, [pc, #440]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b6b      	ldr	r3, [pc, #428]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a6a      	ldr	r2, [pc, #424]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b68      	ldr	r3, [pc, #416]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	23c0      	movs	r3, #192	; 0xc0
 8000afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b10:	2307      	movs	r3, #7
 8000b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	485d      	ldr	r0, [pc, #372]	; (8000c94 <HAL_UART_MspInit+0x218>)
 8000b1e:	f000 fecf 	bl	80018c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b22:	4b5d      	ldr	r3, [pc, #372]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b24:	4a5d      	ldr	r2, [pc, #372]	; (8000c9c <HAL_UART_MspInit+0x220>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b28:	4b5b      	ldr	r3, [pc, #364]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b30:	4b59      	ldr	r3, [pc, #356]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b36:	4b58      	ldr	r3, [pc, #352]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3c:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b44:	4b54      	ldr	r3, [pc, #336]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4a:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b50:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b56:	4b50      	ldr	r3, [pc, #320]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b5e:	4b4e      	ldr	r3, [pc, #312]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b64:	484c      	ldr	r0, [pc, #304]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b66:	f000 faa1 	bl	80010ac <HAL_DMA_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000b70:	f7ff fefa 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a48      	ldr	r2, [pc, #288]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b78:	671a      	str	r2, [r3, #112]	; 0x70
 8000b7a:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <HAL_UART_MspInit+0x21c>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2025      	movs	r0, #37	; 0x25
 8000b86:	f000 fa67 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b8a:	2025      	movs	r0, #37	; 0x25
 8000b8c:	f000 fa80 	bl	8001090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b90:	e077      	b.n	8000c82 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a42      	ldr	r2, [pc, #264]	; (8000ca0 <HAL_UART_MspInit+0x224>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d172      	bne.n	8000c82 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fe08 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8000bb6:	f7ff fed7 	bl	8000968 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a34      	ldr	r2, [pc, #208]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <HAL_UART_MspInit+0x214>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4824      	ldr	r0, [pc, #144]	; (8000ca4 <HAL_UART_MspInit+0x228>)
 8000c12:	f000 fe55 	bl	80018c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c18:	4a24      	ldr	r2, [pc, #144]	; (8000cac <HAL_UART_MspInit+0x230>)
 8000c1a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c22:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c58:	f000 fa28 	bl	80010ac <HAL_DMA_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8000c62:	f7ff fe81 	bl	8000968 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c6a:	671a      	str	r2, [r3, #112]	; 0x70
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_UART_MspInit+0x22c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2027      	movs	r0, #39	; 0x27
 8000c78:	f000 f9ee 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c7c:	2027      	movs	r0, #39	; 0x27
 8000c7e:	f000 fa07 	bl	8001090 <HAL_NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	37b0      	adds	r7, #176	; 0xb0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400
 8000c98:	2000017c 	.word	0x2000017c
 8000c9c:	40026440 	.word	0x40026440
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	200001dc 	.word	0x200001dc
 8000cac:	40026028 	.word	0x40026028

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	202c      	movs	r0, #44	; 0x2c
 8000cc6:	f000 f9c7 	bl	8001058 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000cca:	202c      	movs	r0, #44	; 0x2c
 8000ccc:	f000 f9e0 	bl	8001090 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a1d      	ldr	r2, [pc, #116]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce8:	f107 0210 	add.w	r2, r7, #16
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fd32 	bl	800275c <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf8:	f001 fd08 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8000cfc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_InitTick+0xa0>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	0c9b      	lsrs	r3, r3, #18
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d18:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d2e:	f002 f891 	bl	8002e54 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d104      	bne.n	8000d42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d3a:	f002 f8ed 	bl	8002f18 <HAL_TIM_Base_Start_IT>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	2000028c 	.word	0x2000028c
 8000d58:	40001c00 	.word	0x40001c00

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <DMA1_Stream1_IRQHandler+0x10>)
 8000dba:	f000 fb17 	bl	80013ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001dc 	.word	0x200001dc

08000dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <USART1_IRQHandler+0x10>)
 8000dce:	f002 fc03 	bl	80035d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000074 	.word	0x20000074

08000ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <USART3_IRQHandler+0x10>)
 8000de2:	f002 fbf9 	bl	80035d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000f8 	.word	0x200000f8

08000df0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000df6:	f002 f907 	bl	8003008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000028c 	.word	0x2000028c

08000e04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <DMA2_Stream2_IRQHandler+0x10>)
 8000e0a:	f000 faef 	bl	80013ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000017c 	.word	0x2000017c

08000e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e42:	490e      	ldr	r1, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e58:	4c0b      	ldr	r4, [pc, #44]	; (8000e88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e66:	f7ff ffd7 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f003 fd59 	bl	8004920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fbab 	bl	80005c8 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e80:	080049e8 	.word	0x080049e8
  ldr r2, =_sbss
 8000e84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e88:	200002dc 	.word	0x200002dc

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>

08000e8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f8d5 	bl	8001042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e98:	200f      	movs	r0, #15
 8000e9a:	f7ff ff09 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9e:	f7ff fd69 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200002d8 	.word	0x200002d8

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200002d8 	.word	0x200002d8

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	05fa0000 	.word	0x05fa0000

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff4c 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106a:	f7ff ff61 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 800106e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ffb1 	bl	8000fdc <NVIC_EncodePriority>
 800107a:	4602      	mov	r2, r0
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff80 	bl	8000f88 <__NVIC_SetPriority>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff54 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ff0a 	bl	8000ed0 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e099      	b.n	80011fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2202      	movs	r2, #2
 80010cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e8:	e00f      	b.n	800110a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ea:	f7ff fef1 	bl	8000ed0 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d908      	bls.n	800110a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e078      	b.n	80011fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e8      	bne.n	80010ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <HAL_DMA_Init+0x158>)
 8001124:	4013      	ands	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	2b04      	cmp	r3, #4
 8001162:	d107      	bne.n	8001174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4313      	orrs	r3, r2
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4313      	orrs	r3, r2
 8001194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	2b04      	cmp	r3, #4
 800119c:	d117      	bne.n	80011ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00e      	beq.n	80011ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fb09 	bl	80017c8 <DMA_CheckFifoParam>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ca:	2301      	movs	r3, #1
 80011cc:	e016      	b.n	80011fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fac0 	bl	800175c <DMA_CalcBaseAndBitshift>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	223f      	movs	r2, #63	; 0x3f
 80011e6:	409a      	lsls	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	e010803f 	.word	0xe010803f

08001208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_DMA_Start_IT+0x26>
 800122a:	2302      	movs	r3, #2
 800122c:	e048      	b.n	80012c0 <HAL_DMA_Start_IT+0xb8>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d137      	bne.n	80012b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2202      	movs	r2, #2
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 fa52 	bl	8001700 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	223f      	movs	r2, #63	; 0x3f
 8001262:	409a      	lsls	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0216 	orr.w	r2, r2, #22
 8001276:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001286:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0208 	orr.w	r2, r2, #8
 800129e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e005      	b.n	80012be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ba:	2302      	movs	r3, #2
 80012bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012d6:	f7ff fdfb 	bl	8000ed0 <HAL_GetTick>
 80012da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d008      	beq.n	80012fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e052      	b.n	80013a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0216 	bic.w	r2, r2, #22
 8001308:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001318:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <HAL_DMA_Abort+0x62>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0208 	bic.w	r2, r2, #8
 8001338:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0201 	bic.w	r2, r2, #1
 8001348:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134a:	e013      	b.n	8001374 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134c:	f7ff fdc0 	bl	8000ed0 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b05      	cmp	r3, #5
 8001358:	d90c      	bls.n	8001374 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2203      	movs	r2, #3
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e015      	b.n	80013a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1e4      	bne.n	800134c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	223f      	movs	r2, #63	; 0x3f
 8001388:	409a      	lsls	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d004      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00c      	b.n	80013e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2205      	movs	r2, #5
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0201 	bic.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80013f8:	4b8e      	ldr	r3, [pc, #568]	; (8001634 <HAL_DMA_IRQHandler+0x248>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a8e      	ldr	r2, [pc, #568]	; (8001638 <HAL_DMA_IRQHandler+0x24c>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0a9b      	lsrs	r3, r3, #10
 8001404:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	2208      	movs	r2, #8
 8001418:	409a      	lsls	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01a      	beq.n	8001458 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0204 	bic.w	r2, r2, #4
 800143e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001444:	2208      	movs	r2, #8
 8001446:	409a      	lsls	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	2201      	movs	r2, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d012      	beq.n	800148e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147a:	2201      	movs	r2, #1
 800147c:	409a      	lsls	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001486:	f043 0202 	orr.w	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	2204      	movs	r2, #4
 8001494:	409a      	lsls	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d012      	beq.n	80014c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	2204      	movs	r2, #4
 80014b2:	409a      	lsls	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	f043 0204 	orr.w	r2, r3, #4
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	2210      	movs	r2, #16
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d043      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03c      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	2210      	movs	r2, #16
 80014e8:	409a      	lsls	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d018      	beq.n	800152e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d108      	bne.n	800151c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d024      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	4798      	blx	r3
 800151a:	e01f      	b.n	800155c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01b      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
 800152c:	e016      	b.n	800155c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0208 	bic.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	2220      	movs	r2, #32
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 808f 	beq.w	800168c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8087 	beq.w	800168c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	2220      	movs	r2, #32
 8001584:	409a      	lsls	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b05      	cmp	r3, #5
 8001594:	d136      	bne.n	8001604 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0216 	bic.w	r2, r2, #22
 80015a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d103      	bne.n	80015c6 <HAL_DMA_IRQHandler+0x1da>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0208 	bic.w	r2, r2, #8
 80015d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	223f      	movs	r2, #63	; 0x3f
 80015dc:	409a      	lsls	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d07e      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
        }
        return;
 8001602:	e079      	b.n	80016f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d01d      	beq.n	800164e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	2b00      	cmp	r3, #0
 8001626:	d031      	beq.n	800168c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e02c      	b.n	800168c <HAL_DMA_IRQHandler+0x2a0>
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000
 8001638:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d023      	beq.n	800168c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
 800164c:	e01e      	b.n	800168c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10f      	bne.n	800167c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0210 	bic.w	r2, r2, #16
 800166a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	2b00      	cmp	r3, #0
 8001692:	d032      	beq.n	80016fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d022      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2205      	movs	r2, #5
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d307      	bcc.n	80016d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f2      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x2cc>
 80016d2:	e000      	b.n	80016d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
 80016f6:	e000      	b.n	80016fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80016f8:	bf00      	nop
    }
  }
}
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800171c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d108      	bne.n	8001740 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800173e:	e007      	b.n	8001750 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	60da      	str	r2, [r3, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3b10      	subs	r3, #16
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <DMA_CalcBaseAndBitshift+0x60>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <DMA_CalcBaseAndBitshift+0x64>)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d908      	bls.n	800179c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001792:	4013      	ands	r3, r2
 8001794:	1d1a      	adds	r2, r3, #4
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
 800179a:	e006      	b.n	80017aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <DMA_CalcBaseAndBitshift+0x68>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	aaaaaaab 	.word	0xaaaaaaab
 80017c0:	080049d0 	.word	0x080049d0
 80017c4:	fffffc00 	.word	0xfffffc00

080017c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d11f      	bne.n	8001822 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d856      	bhi.n	8001896 <DMA_CheckFifoParam+0xce>
 80017e8:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <DMA_CheckFifoParam+0x28>)
 80017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ee:	bf00      	nop
 80017f0:	08001801 	.word	0x08001801
 80017f4:	08001813 	.word	0x08001813
 80017f8:	08001801 	.word	0x08001801
 80017fc:	08001897 	.word	0x08001897
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d046      	beq.n	800189a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001810:	e043      	b.n	800189a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800181a:	d140      	bne.n	800189e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001820:	e03d      	b.n	800189e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800182a:	d121      	bne.n	8001870 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d837      	bhi.n	80018a2 <DMA_CheckFifoParam+0xda>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <DMA_CheckFifoParam+0x70>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	08001849 	.word	0x08001849
 800183c:	0800184f 	.word	0x0800184f
 8001840:	08001849 	.word	0x08001849
 8001844:	08001861 	.word	0x08001861
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
      break;
 800184c:	e030      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d025      	beq.n	80018a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800185e:	e022      	b.n	80018a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001868:	d11f      	bne.n	80018aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800186e:	e01c      	b.n	80018aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d903      	bls.n	800187e <DMA_CheckFifoParam+0xb6>
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d003      	beq.n	8001884 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800187c:	e018      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
      break;
 8001882:	e015      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00e      	beq.n	80018ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
      break;
 8001894:	e00b      	b.n	80018ae <DMA_CheckFifoParam+0xe6>
      break;
 8001896:	bf00      	nop
 8001898:	e00a      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      break;
 800189a:	bf00      	nop
 800189c:	e008      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      break;
 800189e:	bf00      	nop
 80018a0:	e006      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      break;
 80018a2:	bf00      	nop
 80018a4:	e004      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      break;
 80018a6:	bf00      	nop
 80018a8:	e002      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80018aa:	bf00      	nop
 80018ac:	e000      	b.n	80018b0 <DMA_CheckFifoParam+0xe8>
      break;
 80018ae:	bf00      	nop
    }
  } 
  
  return status; 
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e169      	b.n	8001bb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8158 	bne.w	8001bae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d005      	beq.n	8001916 <HAL_GPIO_Init+0x56>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80b2 	beq.w	8001bae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <HAL_GPIO_Init+0x30c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a5f      	ldr	r2, [pc, #380]	; (8001bcc <HAL_GPIO_Init+0x30c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b5d      	ldr	r3, [pc, #372]	; (8001bcc <HAL_GPIO_Init+0x30c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a62:	4a5b      	ldr	r2, [pc, #364]	; (8001bd0 <HAL_GPIO_Init+0x310>)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_GPIO_Init+0x314>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d02b      	beq.n	8001ae6 <HAL_GPIO_Init+0x226>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <HAL_GPIO_Init+0x318>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d025      	beq.n	8001ae2 <HAL_GPIO_Init+0x222>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a50      	ldr	r2, [pc, #320]	; (8001bdc <HAL_GPIO_Init+0x31c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x21e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4f      	ldr	r2, [pc, #316]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x21a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4e      	ldr	r2, [pc, #312]	; (8001be4 <HAL_GPIO_Init+0x324>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x216>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_GPIO_Init+0x328>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	; (8001bec <HAL_GPIO_Init+0x32c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x20e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4b      	ldr	r2, [pc, #300]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x20a>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00e      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001aca:	2308      	movs	r3, #8
 8001acc:	e00c      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	; (8001bd0 <HAL_GPIO_Init+0x310>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a32      	ldr	r2, [pc, #200]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba8:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f ae92 	bls.w	80018e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e07f      	b.n	8001d0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe fecc 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2224      	movs	r2, #36	; 0x24
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	e006      	b.n	8001c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d104      	bne.n	8001c92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_I2C_Init+0x11c>)
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69d9      	ldr	r1, [r3, #28]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	02008000 	.word	0x02008000

08001d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d138      	bne.n	8001da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e032      	b.n	8001da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001da0:	2302      	movs	r3, #2
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d139      	bne.n	8001e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e033      	b.n	8001e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2224      	movs	r2, #36	; 0x24
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e000      	b.n	8001e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
  }
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e291      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8087 	beq.w	8001f7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e6c:	4b96      	ldr	r3, [pc, #600]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d00c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e78:	4b93      	ldr	r3, [pc, #588]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d112      	bne.n	8001eaa <HAL_RCC_OscConfig+0x62>
 8001e84:	4b90      	ldr	r3, [pc, #576]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e90:	d10b      	bne.n	8001eaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	4b8d      	ldr	r3, [pc, #564]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d06c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x130>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d168      	bne.n	8001f78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e26b      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x7a>
 8001eb4:	4b84      	ldr	r3, [pc, #528]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a83      	ldr	r2, [pc, #524]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e02e      	b.n	8001f20 <HAL_RCC_OscConfig+0xd8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x9c>
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b7c      	ldr	r3, [pc, #496]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7b      	ldr	r2, [pc, #492]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xd8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0xc0>
 8001eee:	4b76      	ldr	r3, [pc, #472]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a75      	ldr	r2, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xd8>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b6c      	ldr	r3, [pc, #432]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6b      	ldr	r2, [pc, #428]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ffd2 	bl	8000ed0 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe ffce 	bl	8000ed0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e21f      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe8>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe ffbe 	bl	8000ed0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe ffba 	bl	8000ed0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e20b      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x110>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d069      	beq.n	800205a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f86:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x190>
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x17a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1df      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	493d      	ldr	r1, [pc, #244]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e040      	b.n	800205a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d023      	beq.n	8002028 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe ff70 	bl	8000ed0 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7fe ff6c 	bl	8000ed0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1bd      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4929      	ldr	r1, [pc, #164]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
 8002026:	e018      	b.n	800205a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe ff4c 	bl	8000ed0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe ff48 	bl	8000ed0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e199      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d038      	beq.n	80020d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8002070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002072:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7fe ff29 	bl	8000ed0 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002082:	f7fe ff25 	bl	8000ed0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e176      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x23a>
 80020a0:	e01a      	b.n	80020d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 80020a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_RCC_OscConfig+0x280>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7fe ff0f 	bl	8000ed0 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b6:	f7fe ff0b 	bl	8000ed0 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d903      	bls.n	80020cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e15c      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
 80020c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b91      	ldr	r3, [pc, #580]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ee      	bne.n	80020b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a4 	beq.w	800222e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b8b      	ldr	r3, [pc, #556]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b88      	ldr	r3, [pc, #544]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a87      	ldr	r2, [pc, #540]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b85      	ldr	r3, [pc, #532]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210e:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800211a:	4b7f      	ldr	r3, [pc, #508]	; (8002318 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a7e      	ldr	r2, [pc, #504]	; (8002318 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fed3 	bl	8000ed0 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe fecf 	bl	8000ed0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e120      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	4b75      	ldr	r3, [pc, #468]	; (8002318 <HAL_RCC_OscConfig+0x4d0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x31a>
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	e02d      	b.n	80021be <HAL_RCC_OscConfig+0x376>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x33c>
 800216a:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a66      	ldr	r2, [pc, #408]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x376>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x35e>
 800218c:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a60      	ldr	r2, [pc, #384]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x376>
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a57      	ldr	r2, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7fe fe83 	bl	8000ed0 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fe7f 	bl	8000ed0 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0ce      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x386>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7fe fe6d 	bl	8000ed0 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fe69 	bl	8000ed0 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0b8      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80a4 	beq.w	8002380 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d06b      	beq.n	800231c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d149      	bne.n	80022e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fe3a 	bl	8000ed0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fe36 	bl	8000ed0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e087      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	3b01      	subs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	4313      	orrs	r3, r2
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fe0a 	bl	8000ed0 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fe06 	bl	8000ed0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e057      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x478>
 80022de:	e04f      	b.n	8002380 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fdf0 	bl	8000ed0 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe fdec 	bl	8000ed0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e03d      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x4ac>
 8002312:	e035      	b.n	8002380 <HAL_RCC_OscConfig+0x538>
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x544>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d028      	beq.n	800237c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002352:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0d0      	b.n	800254a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d910      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 020f 	bic.w	r2, r3, #15
 80023be:	4965      	ldr	r1, [pc, #404]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b63      	ldr	r3, [pc, #396]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b8      	b.n	800254a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	4b59      	ldr	r3, [pc, #356]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002408:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 800240e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002412:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	494d      	ldr	r1, [pc, #308]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d040      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e07f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e073      	b.n	800254a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06b      	b.n	800254a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4936      	ldr	r1, [pc, #216]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	4313      	orrs	r3, r2
 8002482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7fe fd24 	bl	8000ed0 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7fe fd20 	bl	8000ed0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e053      	b.n	800254a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 020c 	and.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1eb      	bne.n	800248c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d210      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 020f 	bic.w	r2, r3, #15
 80024ca:	4922      	ldr	r1, [pc, #136]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e032      	b.n	800254a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4916      	ldr	r1, [pc, #88]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	490e      	ldr	r1, [pc, #56]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002522:	f000 f821 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002526:	4602      	mov	r2, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	490a      	ldr	r1, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x1cc>)
 8002534:	5ccb      	ldrb	r3, [r1, r3]
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1d0>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1d4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fbb4 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00
 8002558:	40023800 	.word	0x40023800
 800255c:	080049b8 	.word	0x080049b8
 8002560:	20000000 	.word	0x20000000
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	b090      	sub	sp, #64	; 0x40
 800256e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
 8002574:	2300      	movs	r3, #0
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002580:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d00d      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x40>
 800258c:	2b08      	cmp	r3, #8
 800258e:	f200 80a1 	bhi.w	80026d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x34>
 8002596:	2b04      	cmp	r3, #4
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800259a:	e09b      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_GetSysClockFreq+0x184>)
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025a0:	e09b      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025a2:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025a6:	e098      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025b2:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d028      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	2200      	movs	r2, #0
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	627a      	str	r2, [r7, #36]	; 0x24
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025d0:	2100      	movs	r1, #0
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025d4:	fb03 f201 	mul.w	r2, r3, r1
 80025d8:	2300      	movs	r3, #0
 80025da:	fb00 f303 	mul.w	r3, r0, r3
 80025de:	4413      	add	r3, r2
 80025e0:	4a43      	ldr	r2, [pc, #268]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025e2:	fba0 1202 	umull	r1, r2, r0, r2
 80025e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e8:	460a      	mov	r2, r1
 80025ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80025ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ee:	4413      	add	r3, r2
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f4:	2200      	movs	r2, #0
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	61fa      	str	r2, [r7, #28]
 80025fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002602:	f7fd fe0d 	bl	8000220 <__aeabi_uldivmod>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4613      	mov	r3, r2
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260e:	e053      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002610:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	2200      	movs	r2, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	617a      	str	r2, [r7, #20]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002622:	f04f 0b00 	mov.w	fp, #0
 8002626:	4652      	mov	r2, sl
 8002628:	465b      	mov	r3, fp
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	0159      	lsls	r1, r3, #5
 8002634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002638:	0150      	lsls	r0, r2, #5
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	ebb2 080a 	subs.w	r8, r2, sl
 8002642:	eb63 090b 	sbc.w	r9, r3, fp
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002652:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002656:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800265a:	ebb2 0408 	subs.w	r4, r2, r8
 800265e:	eb63 0509 	sbc.w	r5, r3, r9
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	00eb      	lsls	r3, r5, #3
 800266c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002670:	00e2      	lsls	r2, r4, #3
 8002672:	4614      	mov	r4, r2
 8002674:	461d      	mov	r5, r3
 8002676:	eb14 030a 	adds.w	r3, r4, sl
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	eb45 030b 	adc.w	r3, r5, fp
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800268e:	4629      	mov	r1, r5
 8002690:	028b      	lsls	r3, r1, #10
 8002692:	4621      	mov	r1, r4
 8002694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002698:	4621      	mov	r1, r4
 800269a:	028a      	lsls	r2, r1, #10
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	2200      	movs	r2, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	60fa      	str	r2, [r7, #12]
 80026a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ac:	f7fd fdb8 	bl	8000220 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4613      	mov	r3, r2
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80026c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026d2:	e002      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetSysClockFreq+0x184>)
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3740      	adds	r7, #64	; 0x40
 80026e0:	46bd      	mov	sp, r7
 80026e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	00f42400 	.word	0x00f42400
 80026f0:	017d7840 	.word	0x017d7840

080026f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_GetHCLKFreq+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002710:	f7ff fff0 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0a9b      	lsrs	r3, r3, #10
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4903      	ldr	r1, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	080049c8 	.word	0x080049c8

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002738:	f7ff ffdc 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0b5b      	lsrs	r3, r3, #13
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	080049c8 	.word	0x080049c8

0800275c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	220f      	movs	r2, #15
 800276a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_GetClockConfig+0x5c>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_RCC_GetClockConfig+0x5c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	08db      	lsrs	r3, r3, #3
 8002796:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_RCC_GetClockConfig+0x60>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	601a      	str	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027e4:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a64      	ldr	r2, [pc, #400]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	4b62      	ldr	r3, [pc, #392]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	4960      	ldr	r1, [pc, #384]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002816:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	4955      	ldr	r1, [pc, #340]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002834:	d101      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d017      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	4946      	ldr	r1, [pc, #280]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002870:	d101      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 808b 	beq.w	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	4a39      	ldr	r2, [pc, #228]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	6413      	str	r3, [r2, #64]	; 0x40
 800289c:	4b37      	ldr	r3, [pc, #220]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a34      	ldr	r2, [pc, #208]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b4:	f7fe fb0c 	bl	8000ed0 <HAL_GetTick>
 80028b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028bc:	f7fe fb08 	bl	8000ed0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e2bc      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ce:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028da:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d035      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d02e      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d114      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fad0 	bl	8000ed0 <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe facc 	bl	8000ed0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e27e      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002962:	d111      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002972:	400b      	ands	r3, r1
 8002974:	4901      	ldr	r1, [pc, #4]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
 800297a:	e00b      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
 8002984:	0ffffcff 	.word	0x0ffffcff
 8002988:	4ba4      	ldr	r3, [pc, #656]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4aa3      	ldr	r2, [pc, #652]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800298e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	4ba1      	ldr	r3, [pc, #644]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	499e      	ldr	r1, [pc, #632]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029b2:	4b9a      	ldr	r3, [pc, #616]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b8:	4a98      	ldr	r2, [pc, #608]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029c2:	4b96      	ldr	r3, [pc, #600]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4993      	ldr	r1, [pc, #588]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029e0:	4b8e      	ldr	r3, [pc, #568]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	498b      	ldr	r1, [pc, #556]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a02:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	4982      	ldr	r1, [pc, #520]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a24:	4b7d      	ldr	r3, [pc, #500]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a32:	497a      	ldr	r1, [pc, #488]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a46:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f023 0203 	bic.w	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	4971      	ldr	r1, [pc, #452]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a68:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f023 020c 	bic.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4969      	ldr	r1, [pc, #420]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a8a:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	4960      	ldr	r1, [pc, #384]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aac:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aba:	4958      	ldr	r1, [pc, #352]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	494f      	ldr	r1, [pc, #316]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002af0:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	4947      	ldr	r1, [pc, #284]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b12:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	493e      	ldr	r1, [pc, #248]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b34:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	4936      	ldr	r1, [pc, #216]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d011      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b64:	492d      	ldr	r1, [pc, #180]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b94:	4921      	ldr	r1, [pc, #132]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb6:	4919      	ldr	r1, [pc, #100]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd8:	4910      	ldr	r1, [pc, #64]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d006      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 809d 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe f966 	bl	8000ed0 <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c06:	e00b      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c08:	f7fe f962 	bl	8000ed0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d904      	bls.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e116      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c20:	4b8b      	ldr	r3, [pc, #556]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ed      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d017      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d113      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c40:	4b83      	ldr	r3, [pc, #524]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c46:	0e1b      	lsrs	r3, r3, #24
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	019a      	lsls	r2, r3, #6
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	071b      	lsls	r3, r3, #28
 8002c60:	497b      	ldr	r1, [pc, #492]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c92:	d11f      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c94:	4b6e      	ldr	r3, [pc, #440]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9a:	0f1b      	lsrs	r3, r3, #28
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	019a      	lsls	r2, r3, #6
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	071b      	lsls	r3, r3, #28
 8002cb4:	4966      	ldr	r1, [pc, #408]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cbc:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc2:	f023 021f 	bic.w	r2, r3, #31
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	4960      	ldr	r1, [pc, #384]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	019a      	lsls	r2, r3, #6
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	061b      	lsls	r3, r3, #24
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	071b      	lsls	r3, r3, #28
 8002cf4:	4956      	ldr	r1, [pc, #344]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cfc:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a53      	ldr	r2, [pc, #332]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe f8e2 	bl	8000ed0 <HAL_GetTick>
 8002d0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d10:	f7fe f8de 	bl	8000ed0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e092      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d22:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f040 8088 	bne.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a45      	ldr	r2, [pc, #276]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d42:	f7fe f8c5 	bl	8000ed0 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d4a:	f7fe f8c1 	bl	8000ed0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e075      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d68:	d0ef      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d024      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d120      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	019a      	lsls	r2, r3, #6
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4927      	ldr	r1, [pc, #156]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	4920      	ldr	r1, [pc, #128]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d018      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de8:	d113      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dea:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	0e1b      	lsrs	r3, r3, #24
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	019a      	lsls	r2, r3, #6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	4911      	ldr	r1, [pc, #68]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f857 	bl	8000ed0 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e26:	f7fe f853 	bl	8000ed0 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	; 0x64
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e007      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e44:	d1ef      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e049      	b.n	8002efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f841 	bl	8002f02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 fa00 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e054      	b.n	8002fda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d01d      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <HAL_TIM_Base_Start_IT+0xd4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d018      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00e      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <HAL_TIM_Base_Start_IT+0xe4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d115      	bne.n	8002fc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_TIM_Base_Start_IT+0xec>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d015      	beq.n	8002fd6 <HAL_TIM_Base_Start_IT+0xbe>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d011      	beq.n	8002fd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e008      	b.n	8002fd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e000      	b.n	8002fd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40010400 	.word	0x40010400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40001800 	.word	0x40001800
 8003004:	00010007 	.word	0x00010007

08003008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b02      	cmp	r3, #2
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0202 	mvn.w	r2, #2
 8003034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f905 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8f7 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f908 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0204 	mvn.w	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8db 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8cd 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8de 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0208 	mvn.w	r2, #8
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8b1 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8a3 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f8b4 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2208      	movs	r2, #8
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f887 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f879 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f88a 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0201 	mvn.w	r2, #1
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fbdc 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f91a 	bl	80033ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c6:	d10e      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d107      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f90d 	bl	8003400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d10e      	bne.n	8003212 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d107      	bne.n	8003212 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800320a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f838 	bl	8003282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b20      	cmp	r3, #32
 800321e:	d10e      	bne.n	800323e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b20      	cmp	r3, #32
 800322c:	d107      	bne.n	800323e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0220 	mvn.w	r2, #32
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8cd 	bl	80033d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a40      	ldr	r2, [pc, #256]	; (80033ac <TIM_Base_SetConfig+0x114>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d00f      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3d      	ldr	r2, [pc, #244]	; (80033b0 <TIM_Base_SetConfig+0x118>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00b      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3c      	ldr	r2, [pc, #240]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3b      	ldr	r2, [pc, #236]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3a      	ldr	r2, [pc, #232]	; (80033bc <TIM_Base_SetConfig+0x124>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <TIM_Base_SetConfig+0x114>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d02b      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d027      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <TIM_Base_SetConfig+0x118>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d023      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01b      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a29      	ldr	r2, [pc, #164]	; (80033bc <TIM_Base_SetConfig+0x124>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d017      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00f      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <TIM_Base_SetConfig+0x130>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <TIM_Base_SetConfig+0x134>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <TIM_Base_SetConfig+0x138>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <TIM_Base_SetConfig+0x13c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <TIM_Base_SetConfig+0x114>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0xf8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <TIM_Base_SetConfig+0x124>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40010400 	.word	0x40010400
 80033c0:	40014000 	.word	0x40014000
 80033c4:	40014400 	.word	0x40014400
 80033c8:	40014800 	.word	0x40014800
 80033cc:	40001800 	.word	0x40001800
 80033d0:	40001c00 	.word	0x40001c00
 80033d4:	40002000 	.word	0x40002000

080033d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e040      	b.n	80034a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fb20 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fbb2 	bl	8003bbc <UART_SetConfig>
 8003458:	4603      	mov	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e022      	b.n	80034a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fe0a 	bl	8004084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800347e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800348e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fe91 	bl	80041c8 <UART_CheckIdleState>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	f040 8081 	bne.w	80035cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_UART_Transmit+0x26>
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e079      	b.n	80035ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x38>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e072      	b.n	80035ce <HAL_UART_Transmit+0x11e>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2221      	movs	r2, #33	; 0x21
 80034fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fe:	f7fd fce7 	bl	8000ed0 <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d108      	bne.n	8003530 <HAL_UART_Transmit+0x80>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e003      	b.n	8003538 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003540:	e02c      	b.n	800359c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fe6e 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e038      	b.n	80035ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3302      	adds	r3, #2
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	e007      	b.n	800358a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1cc      	bne.n	8003542 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fe3b 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e005      	b.n	80035ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e000      	b.n	80035ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
  }
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0ba      	sub	sp, #232	; 0xe8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003602:	f640 030f 	movw	r3, #2063	; 0x80f
 8003606:	4013      	ands	r3, r2
 8003608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800360c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d115      	bne.n	8003640 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00f      	beq.n	8003640 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 828f 	beq.w	8003b54 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
      }
      return;
 800363e:	e289      	b.n	8003b54 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8117 	beq.w	8003878 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800364a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003656:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800365a:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_UART_IRQHandler+0x298>)
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 810a 	beq.w	8003878 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d011      	beq.n	8003694 <HAL_UART_IRQHandler+0xbc>
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d011      	beq.n	80036c4 <HAL_UART_IRQHandler+0xec>
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2202      	movs	r2, #2
 80036b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d011      	beq.n	80036f4 <HAL_UART_IRQHandler+0x11c>
 80036d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2204      	movs	r2, #4
 80036e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ea:	f043 0202 	orr.w	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d017      	beq.n	8003730 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800370c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003710:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2208      	movs	r2, #8
 800371e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003726:	f043 0208 	orr.w	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_UART_IRQHandler+0x18a>
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00c      	beq.n	8003762 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 81f5 	beq.w	8003b58 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d005      	beq.n	80037ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d04f      	beq.n	800385a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fec8 	bl	8004550 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d141      	bne.n	8003852 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1d9      	bne.n	80037ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_UART_IRQHandler+0x29c>)
 8003828:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fdba 	bl	80013a8 <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00f      	b.n	800386a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9ac 	bl	8003ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00b      	b.n	800386a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9a8 	bl	8003ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e007      	b.n	800386a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9a4 	bl	8003ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003868:	e176      	b.n	8003b58 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386a:	bf00      	nop
    return;
 800386c:	e174      	b.n	8003b58 <HAL_UART_IRQHandler+0x580>
 800386e:	bf00      	nop
 8003870:	04000120 	.word	0x04000120
 8003874:	080047eb 	.word	0x080047eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 8144 	bne.w	8003b0a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 813d 	beq.w	8003b0a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8136 	beq.w	8003b0a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2210      	movs	r2, #16
 80038a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	f040 80b2 	bne.w	8003a1a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8148 	beq.w	8003b5c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038d6:	429a      	cmp	r2, r3
 80038d8:	f080 8140 	bcs.w	8003b5c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f0:	f000 8085 	beq.w	80039fe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800391e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003922:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800392a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1da      	bne.n	80038f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3308      	adds	r3, #8
 8003944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800394e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3308      	adds	r3, #8
 800395e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800396a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e1      	bne.n	800393e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3308      	adds	r3, #8
 8003980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800398a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3308      	adds	r3, #8
 800399a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800399e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e3      	bne.n	800397a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ce:	f023 0310 	bic.w	r3, r3, #16
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80039e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e4      	bne.n	80039be <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd fc65 	bl	80012c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fc fd86 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a18:	e0a0      	b.n	8003b5c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8092 	beq.w	8003b60 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8003a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 808d 	beq.w	8003b60 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a68:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e4      	bne.n	8003a46 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aa0:	633a      	str	r2, [r7, #48]	; 0x30
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	617b      	str	r3, [r7, #20]
   return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e4      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fd0e 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b08:	e02a      	b.n	8003b60 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00e      	beq.n	8003b34 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01c      	beq.n	8003b64 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
    }
    return;
 8003b32:	e017      	b.n	8003b64 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d012      	beq.n	8003b66 <HAL_UART_IRQHandler+0x58e>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fe62 	bl	8004816 <UART_EndTransmit_IT>
    return;
 8003b52:	e008      	b.n	8003b66 <HAL_UART_IRQHandler+0x58e>
      return;
 8003b54:	bf00      	nop
 8003b56:	e006      	b.n	8003b66 <HAL_UART_IRQHandler+0x58e>
    return;
 8003b58:	bf00      	nop
 8003b5a:	e004      	b.n	8003b66 <HAL_UART_IRQHandler+0x58e>
      return;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <HAL_UART_IRQHandler+0x58e>
      return;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_UART_IRQHandler+0x58e>
    return;
 8003b64:	bf00      	nop
  }

}
 8003b66:	37e8      	adds	r7, #232	; 0xe8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4ba6      	ldr	r3, [pc, #664]	; (8003e80 <UART_SetConfig+0x2c4>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a94      	ldr	r2, [pc, #592]	; (8003e84 <UART_SetConfig+0x2c8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d120      	bne.n	8003c7a <UART_SetConfig+0xbe>
 8003c38:	4b93      	ldr	r3, [pc, #588]	; (8003e88 <UART_SetConfig+0x2cc>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d816      	bhi.n	8003c74 <UART_SetConfig+0xb8>
 8003c46:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <UART_SetConfig+0x90>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c69 	.word	0x08003c69
 8003c54:	08003c63 	.word	0x08003c63
 8003c58:	08003c6f 	.word	0x08003c6f
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e150      	b.n	8003f04 <UART_SetConfig+0x348>
 8003c62:	2302      	movs	r3, #2
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e14d      	b.n	8003f04 <UART_SetConfig+0x348>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e14a      	b.n	8003f04 <UART_SetConfig+0x348>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e147      	b.n	8003f04 <UART_SetConfig+0x348>
 8003c74:	2310      	movs	r3, #16
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e144      	b.n	8003f04 <UART_SetConfig+0x348>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a83      	ldr	r2, [pc, #524]	; (8003e8c <UART_SetConfig+0x2d0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d132      	bne.n	8003cea <UART_SetConfig+0x12e>
 8003c84:	4b80      	ldr	r3, [pc, #512]	; (8003e88 <UART_SetConfig+0x2cc>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d828      	bhi.n	8003ce4 <UART_SetConfig+0x128>
 8003c92:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <UART_SetConfig+0xdc>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003ce5 	.word	0x08003ce5
 8003ca0:	08003ce5 	.word	0x08003ce5
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003cd9 	.word	0x08003cd9
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003cd3 	.word	0x08003cd3
 8003cbc:	08003ce5 	.word	0x08003ce5
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ce5 	.word	0x08003ce5
 8003cc8:	08003cdf 	.word	0x08003cdf
 8003ccc:	2300      	movs	r3, #0
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e118      	b.n	8003f04 <UART_SetConfig+0x348>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e115      	b.n	8003f04 <UART_SetConfig+0x348>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e112      	b.n	8003f04 <UART_SetConfig+0x348>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e10f      	b.n	8003f04 <UART_SetConfig+0x348>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e10c      	b.n	8003f04 <UART_SetConfig+0x348>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <UART_SetConfig+0x2d4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d120      	bne.n	8003d36 <UART_SetConfig+0x17a>
 8003cf4:	4b64      	ldr	r3, [pc, #400]	; (8003e88 <UART_SetConfig+0x2cc>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d013      	beq.n	8003d2a <UART_SetConfig+0x16e>
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d814      	bhi.n	8003d30 <UART_SetConfig+0x174>
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d009      	beq.n	8003d1e <UART_SetConfig+0x162>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d810      	bhi.n	8003d30 <UART_SetConfig+0x174>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <UART_SetConfig+0x15c>
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d006      	beq.n	8003d24 <UART_SetConfig+0x168>
 8003d16:	e00b      	b.n	8003d30 <UART_SetConfig+0x174>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e0f2      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	77fb      	strb	r3, [r7, #31]
 8003d22:	e0ef      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d24:	2304      	movs	r3, #4
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e0ec      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e0e9      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d30:	2310      	movs	r3, #16
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e0e6      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a56      	ldr	r2, [pc, #344]	; (8003e94 <UART_SetConfig+0x2d8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d120      	bne.n	8003d82 <UART_SetConfig+0x1c6>
 8003d40:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <UART_SetConfig+0x2cc>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d4c:	d013      	beq.n	8003d76 <UART_SetConfig+0x1ba>
 8003d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d50:	d814      	bhi.n	8003d7c <UART_SetConfig+0x1c0>
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d009      	beq.n	8003d6a <UART_SetConfig+0x1ae>
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d810      	bhi.n	8003d7c <UART_SetConfig+0x1c0>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <UART_SetConfig+0x1a8>
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d006      	beq.n	8003d70 <UART_SetConfig+0x1b4>
 8003d62:	e00b      	b.n	8003d7c <UART_SetConfig+0x1c0>
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e0cc      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e0c9      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d70:	2304      	movs	r3, #4
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e0c6      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d76:	2308      	movs	r3, #8
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e0c3      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e0c0      	b.n	8003f04 <UART_SetConfig+0x348>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a44      	ldr	r2, [pc, #272]	; (8003e98 <UART_SetConfig+0x2dc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d125      	bne.n	8003dd8 <UART_SetConfig+0x21c>
 8003d8c:	4b3e      	ldr	r3, [pc, #248]	; (8003e88 <UART_SetConfig+0x2cc>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9a:	d017      	beq.n	8003dcc <UART_SetConfig+0x210>
 8003d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da0:	d817      	bhi.n	8003dd2 <UART_SetConfig+0x216>
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d00b      	beq.n	8003dc0 <UART_SetConfig+0x204>
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d811      	bhi.n	8003dd2 <UART_SetConfig+0x216>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <UART_SetConfig+0x1fe>
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d006      	beq.n	8003dc6 <UART_SetConfig+0x20a>
 8003db8:	e00b      	b.n	8003dd2 <UART_SetConfig+0x216>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	77fb      	strb	r3, [r7, #31]
 8003dbe:	e0a1      	b.n	8003f04 <UART_SetConfig+0x348>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e09e      	b.n	8003f04 <UART_SetConfig+0x348>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e09b      	b.n	8003f04 <UART_SetConfig+0x348>
 8003dcc:	2308      	movs	r3, #8
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e098      	b.n	8003f04 <UART_SetConfig+0x348>
 8003dd2:	2310      	movs	r3, #16
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e095      	b.n	8003f04 <UART_SetConfig+0x348>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <UART_SetConfig+0x2e0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d125      	bne.n	8003e2e <UART_SetConfig+0x272>
 8003de2:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <UART_SetConfig+0x2cc>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df0:	d017      	beq.n	8003e22 <UART_SetConfig+0x266>
 8003df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df6:	d817      	bhi.n	8003e28 <UART_SetConfig+0x26c>
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d00b      	beq.n	8003e16 <UART_SetConfig+0x25a>
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	d811      	bhi.n	8003e28 <UART_SetConfig+0x26c>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <UART_SetConfig+0x254>
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0c:	d006      	beq.n	8003e1c <UART_SetConfig+0x260>
 8003e0e:	e00b      	b.n	8003e28 <UART_SetConfig+0x26c>
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e076      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e16:	2302      	movs	r3, #2
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e073      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e070      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e22:	2308      	movs	r3, #8
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e06d      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e06a      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <UART_SetConfig+0x2e4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d138      	bne.n	8003eaa <UART_SetConfig+0x2ee>
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <UART_SetConfig+0x2cc>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e46:	d017      	beq.n	8003e78 <UART_SetConfig+0x2bc>
 8003e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e4c:	d82a      	bhi.n	8003ea4 <UART_SetConfig+0x2e8>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e52:	d00b      	beq.n	8003e6c <UART_SetConfig+0x2b0>
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d824      	bhi.n	8003ea4 <UART_SetConfig+0x2e8>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <UART_SetConfig+0x2aa>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d006      	beq.n	8003e72 <UART_SetConfig+0x2b6>
 8003e64:	e01e      	b.n	8003ea4 <UART_SetConfig+0x2e8>
 8003e66:	2300      	movs	r3, #0
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e04b      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e048      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e72:	2304      	movs	r3, #4
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e045      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e042      	b.n	8003f04 <UART_SetConfig+0x348>
 8003e7e:	bf00      	nop
 8003e80:	efff69f3 	.word	0xefff69f3
 8003e84:	40011000 	.word	0x40011000
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40004400 	.word	0x40004400
 8003e90:	40004800 	.word	0x40004800
 8003e94:	40004c00 	.word	0x40004c00
 8003e98:	40005000 	.word	0x40005000
 8003e9c:	40011400 	.word	0x40011400
 8003ea0:	40007800 	.word	0x40007800
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e02c      	b.n	8003f04 <UART_SetConfig+0x348>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a72      	ldr	r2, [pc, #456]	; (8004078 <UART_SetConfig+0x4bc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d125      	bne.n	8003f00 <UART_SetConfig+0x344>
 8003eb4:	4b71      	ldr	r3, [pc, #452]	; (800407c <UART_SetConfig+0x4c0>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ebe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ec2:	d017      	beq.n	8003ef4 <UART_SetConfig+0x338>
 8003ec4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ec8:	d817      	bhi.n	8003efa <UART_SetConfig+0x33e>
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d00b      	beq.n	8003ee8 <UART_SetConfig+0x32c>
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	d811      	bhi.n	8003efa <UART_SetConfig+0x33e>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <UART_SetConfig+0x326>
 8003eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ede:	d006      	beq.n	8003eee <UART_SetConfig+0x332>
 8003ee0:	e00b      	b.n	8003efa <UART_SetConfig+0x33e>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e00d      	b.n	8003f04 <UART_SetConfig+0x348>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e00a      	b.n	8003f04 <UART_SetConfig+0x348>
 8003eee:	2304      	movs	r3, #4
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e007      	b.n	8003f04 <UART_SetConfig+0x348>
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e004      	b.n	8003f04 <UART_SetConfig+0x348>
 8003efa:	2310      	movs	r3, #16
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e001      	b.n	8003f04 <UART_SetConfig+0x348>
 8003f00:	2310      	movs	r3, #16
 8003f02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0c:	d15b      	bne.n	8003fc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d828      	bhi.n	8003f66 <UART_SetConfig+0x3aa>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0x360>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f49 	.word	0x08003f49
 8003f24:	08003f51 	.word	0x08003f51
 8003f28:	08003f67 	.word	0x08003f67
 8003f2c:	08003f57 	.word	0x08003f57
 8003f30:	08003f67 	.word	0x08003f67
 8003f34:	08003f67 	.word	0x08003f67
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	08003f5f 	.word	0x08003f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe fbe4 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003f44:	61b8      	str	r0, [r7, #24]
        break;
 8003f46:	e013      	b.n	8003f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7fe fbf4 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	61b8      	str	r0, [r7, #24]
        break;
 8003f4e:	e00f      	b.n	8003f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f50:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <UART_SetConfig+0x4c4>)
 8003f52:	61bb      	str	r3, [r7, #24]
        break;
 8003f54:	e00c      	b.n	8003f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f56:	f7fe fb07 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8003f5a:	61b8      	str	r0, [r7, #24]
        break;
 8003f5c:	e008      	b.n	8003f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f62:	61bb      	str	r3, [r7, #24]
        break;
 8003f64:	e004      	b.n	8003f70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d074      	beq.n	8004060 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	005a      	lsls	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d916      	bls.n	8003fc0 <UART_SetConfig+0x404>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d212      	bcs.n	8003fc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f023 030f 	bic.w	r3, r3, #15
 8003fa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	89fb      	ldrh	r3, [r7, #14]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	89fa      	ldrh	r2, [r7, #14]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e04f      	b.n	8004060 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77bb      	strb	r3, [r7, #30]
 8003fc4:	e04c      	b.n	8004060 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc6:	7ffb      	ldrb	r3, [r7, #31]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d828      	bhi.n	800401e <UART_SetConfig+0x462>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x418>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	0800401f 	.word	0x0800401f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	0800401f 	.word	0x0800401f
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	08004017 	.word	0x08004017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe fb88 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003ffc:	61b8      	str	r0, [r7, #24]
        break;
 8003ffe:	e013      	b.n	8004028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7fe fb98 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8004004:	61b8      	str	r0, [r7, #24]
        break;
 8004006:	e00f      	b.n	8004028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <UART_SetConfig+0x4c4>)
 800400a:	61bb      	str	r3, [r7, #24]
        break;
 800400c:	e00c      	b.n	8004028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7fe faab 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8004012:	61b8      	str	r0, [r7, #24]
        break;
 8004014:	e008      	b.n	8004028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	61bb      	str	r3, [r7, #24]
        break;
 800401c:	e004      	b.n	8004028 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	77bb      	strb	r3, [r7, #30]
        break;
 8004026:	bf00      	nop
    }

    if (pclk != 0U)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d018      	beq.n	8004060 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	085a      	lsrs	r2, r3, #1
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	441a      	add	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b0f      	cmp	r3, #15
 8004046:	d909      	bls.n	800405c <UART_SetConfig+0x4a0>
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404e:	d205      	bcs.n	800405c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	e001      	b.n	8004060 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800406c:	7fbb      	ldrb	r3, [r7, #30]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40007c00 	.word	0x40007c00
 800407c:	40023800 	.word	0x40023800
 8004080:	00f42400 	.word	0x00f42400

08004084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004182:	d10a      	bne.n	800419a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d8:	f7fc fe7a 	bl	8000ed0 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d10e      	bne.n	800420a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f817 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e00d      	b.n	8004226 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b09c      	sub	sp, #112	; 0x70
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	e0a5      	b.n	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	f000 80a1 	beq.w	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fc fe41 	bl	8000ed0 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <UART_WaitOnFlagUntilTimeout+0x32>
 800425a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425c:	2b00      	cmp	r3, #0
 800425e:	d13e      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800426e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004274:	667b      	str	r3, [r7, #100]	; 0x64
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004280:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800428c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e6      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	663b      	str	r3, [r7, #96]	; 0x60
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e067      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d04f      	beq.n	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fa:	d147      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004304:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800431a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800432a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	613b      	str	r3, [r7, #16]
   return(result);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004358:	623a      	str	r2, [r7, #32]
 800435a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	69f9      	ldr	r1, [r7, #28]
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	61bb      	str	r3, [r7, #24]
   return(result);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e010      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4013      	ands	r3, r2
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	429a      	cmp	r2, r3
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	f43f af4a 	beq.w	8004240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3770      	adds	r7, #112	; 0x70
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b096      	sub	sp, #88	; 0x58
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2222      	movs	r2, #34	; 0x22
 80043e0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02b      	beq.n	8004442 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a42      	ldr	r2, [pc, #264]	; (80044f8 <UART_Start_Receive_DMA+0x140>)
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a41      	ldr	r2, [pc, #260]	; (80044fc <UART_Start_Receive_DMA+0x144>)
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a40      	ldr	r2, [pc, #256]	; (8004500 <UART_Start_Receive_DMA+0x148>)
 8004400:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	2200      	movs	r2, #0
 8004408:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	4619      	mov	r1, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	461a      	mov	r2, r3
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	f7fc fef3 	bl	8001208 <HAL_DMA_Start_IT>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00c      	beq.n	8004442 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2210      	movs	r2, #16
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e055      	b.n	80044ee <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004470:	64bb      	str	r3, [r7, #72]	; 0x48
 8004472:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800447e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3308      	adds	r3, #8
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	653b      	str	r3, [r7, #80]	; 0x50
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044a4:	637a      	str	r2, [r7, #52]	; 0x34
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	613b      	str	r3, [r7, #16]
   return(result);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044d8:	623a      	str	r2, [r7, #32]
 80044da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	69f9      	ldr	r1, [r7, #28]
 80044de:	6a3a      	ldr	r2, [r7, #32]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3758      	adds	r7, #88	; 0x58
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08004617 	.word	0x08004617
 80044fc:	08004737 	.word	0x08004737
 8004500:	0800476f 	.word	0x0800476f

08004504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	60bb      	str	r3, [r7, #8]
   return(result);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	613b      	str	r3, [r7, #16]
   return(result);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e6      	bne.n	800450c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004544:	bf00      	nop
 8004546:	3724      	adds	r7, #36	; 0x24
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b095      	sub	sp, #84	; 0x54
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800456c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	643b      	str	r3, [r7, #64]	; 0x40
 8004578:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800457c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e6      	bne.n	8004558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	61fb      	str	r3, [r7, #28]
   return(result);
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d118      	bne.n	80045f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f023 0310 	bic.w	r3, r3, #16
 80045da:	647b      	str	r3, [r7, #68]	; 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6979      	ldr	r1, [r7, #20]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e6      	bne.n	80045c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	665a      	str	r2, [r3, #100]	; 0x64
}
 800460a:	bf00      	nop
 800460c:	3754      	adds	r7, #84	; 0x54
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b09c      	sub	sp, #112	; 0x70
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462c:	d070      	beq.n	8004710 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800462e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004630:	2200      	movs	r2, #0
 8004632:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800464a:	66bb      	str	r3, [r7, #104]	; 0x68
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004654:	65bb      	str	r3, [r7, #88]	; 0x58
 8004656:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800465a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	667b      	str	r3, [r7, #100]	; 0x64
 8004680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004688:	647a      	str	r2, [r7, #68]	; 0x44
 800468a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800468e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	623b      	str	r3, [r7, #32]
   return(result);
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b2:	663b      	str	r3, [r7, #96]	; 0x60
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046bc:	633a      	str	r2, [r7, #48]	; 0x30
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d2:	2220      	movs	r2, #32
 80046d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d118      	bne.n	8004710 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0310 	bic.w	r3, r3, #16
 80046f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	617b      	str	r3, [r7, #20]
   return(result);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e6      	bne.n	80046de <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800471e:	4619      	mov	r1, r3
 8004720:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004722:	f7fb feff 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004726:	e002      	b.n	800472e <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8004728:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800472a:	f7ff fa29 	bl	8003b80 <HAL_UART_RxCpltCallback>
}
 800472e:	bf00      	nop
 8004730:	3770      	adds	r7, #112	; 0x70
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004748:	2b01      	cmp	r3, #1
 800474a:	d109      	bne.n	8004760 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	b29b      	uxth	r3, r3
 8004756:	4619      	mov	r1, r3
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7fb fee3 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800475e:	e002      	b.n	8004766 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff fa17 	bl	8003b94 <HAL_UART_RxHalfCpltCallback>
}
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004780:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004786:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b80      	cmp	r3, #128	; 0x80
 8004794:	d109      	bne.n	80047aa <UART_DMAError+0x3c>
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d106      	bne.n	80047aa <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80047a4:	6978      	ldr	r0, [r7, #20]
 80047a6:	f7ff fead 	bl	8004504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d109      	bne.n	80047cc <UART_DMAError+0x5e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b22      	cmp	r3, #34	; 0x22
 80047bc:	d106      	bne.n	80047cc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7ff fec2 	bl	8004550 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d2:	f043 0210 	orr.w	r2, r3, #16
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047dc:	6978      	ldr	r0, [r7, #20]
 80047de:	f7ff f9e3 	bl	8003ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff f9cd 	bl	8003ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b088      	sub	sp, #32
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	60bb      	str	r3, [r7, #8]
   return(result);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	613b      	str	r3, [r7, #16]
   return(result);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff f985 	bl	8003b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004862:	bf00      	nop
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b08c      	sub	sp, #48	; 0x30
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	4613      	mov	r3, r2
 8004876:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487c:	2b20      	cmp	r3, #32
 800487e:	d14a      	bne.n	8004916 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e043      	b.n	8004918 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 800489a:	2302      	movs	r3, #2
 800489c:	e03c      	b.n	8004918 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	461a      	mov	r2, r3
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fd80 	bl	80043b8 <UART_Start_Receive_DMA>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d124      	bne.n	8004910 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d11d      	bne.n	800490a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2210      	movs	r2, #16
 80048d4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	617b      	str	r3, [r7, #20]
   return(result);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f043 0310 	orr.w	r3, r3, #16
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6a39      	ldr	r1, [r7, #32]
 80048fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	61fb      	str	r3, [r7, #28]
   return(result);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8004908:	e002      	b.n	8004910 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004914:	e000      	b.n	8004918 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3730      	adds	r7, #48	; 0x30
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <__libc_init_array>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4d0d      	ldr	r5, [pc, #52]	; (8004958 <__libc_init_array+0x38>)
 8004924:	4c0d      	ldr	r4, [pc, #52]	; (800495c <__libc_init_array+0x3c>)
 8004926:	1b64      	subs	r4, r4, r5
 8004928:	10a4      	asrs	r4, r4, #2
 800492a:	2600      	movs	r6, #0
 800492c:	42a6      	cmp	r6, r4
 800492e:	d109      	bne.n	8004944 <__libc_init_array+0x24>
 8004930:	4d0b      	ldr	r5, [pc, #44]	; (8004960 <__libc_init_array+0x40>)
 8004932:	4c0c      	ldr	r4, [pc, #48]	; (8004964 <__libc_init_array+0x44>)
 8004934:	f000 f82e 	bl	8004994 <_init>
 8004938:	1b64      	subs	r4, r4, r5
 800493a:	10a4      	asrs	r4, r4, #2
 800493c:	2600      	movs	r6, #0
 800493e:	42a6      	cmp	r6, r4
 8004940:	d105      	bne.n	800494e <__libc_init_array+0x2e>
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f855 3b04 	ldr.w	r3, [r5], #4
 8004948:	4798      	blx	r3
 800494a:	3601      	adds	r6, #1
 800494c:	e7ee      	b.n	800492c <__libc_init_array+0xc>
 800494e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004952:	4798      	blx	r3
 8004954:	3601      	adds	r6, #1
 8004956:	e7f2      	b.n	800493e <__libc_init_array+0x1e>
 8004958:	080049e0 	.word	0x080049e0
 800495c:	080049e0 	.word	0x080049e0
 8004960:	080049e0 	.word	0x080049e0
 8004964:	080049e4 	.word	0x080049e4

08004968 <memcpy>:
 8004968:	440a      	add	r2, r1
 800496a:	4291      	cmp	r1, r2
 800496c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004970:	d100      	bne.n	8004974 <memcpy+0xc>
 8004972:	4770      	bx	lr
 8004974:	b510      	push	{r4, lr}
 8004976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800497a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497e:	4291      	cmp	r1, r2
 8004980:	d1f9      	bne.n	8004976 <memcpy+0xe>
 8004982:	bd10      	pop	{r4, pc}

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
